version: 2.1

commands: # a reusable command with parameters
  setup-sccache:
    steps:
      - run:
          name: Install sccache
          command: |
            wget https://github.com/mozilla/sccache/releases/download/v0.3.0/sccache-v0.3.0-x86_64-unknown-linux-musl.tar.gz
            tar -xvf sccache-v0.3.0-x86_64-unknown-linux-musl.tar.gz
            rm sccache-v0.3.0-x86_64-unknown-linux-musl.tar.gz
            chmod +x ./sccache-v0.3.0-x86_64-unknown-linux-musl/sccache
            mv ./sccache-v0.3.0-x86_64-unknown-linux-musl/sccache /usr/bin

            # This configures Rust to use sccache.
            echo 'export "RUSTC_WRAPPER"="sccache"' >> $BASH_ENV
            # This is the maximum space sccache cache will use on disk.
            echo 'export "SCCACHE_CACHE_SIZE"="500M"' >> $BASH_ENV
            sccache --version
  restore-sccache-cache:
    steps:
      - restore_cache:
          name: Restore sccache cache
          key: v1-sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}
  save-sccache-cache:
    steps:
      - save_cache:
          name: Save sccache cache
          # We use {{ epoch }} to always upload a fresh cache:
          # Of course, restore_cache will not find this exact key,
          # but it will fall back to the closest key (aka the most recent).
          # See https://discuss.circleci.com/t/add-mechanism-to-update-existing-cache-key/9014/13
          key: v1-sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ epoch }}
          paths:
            - "~/.cache/sccache"
  with-rust-setup:
    parameters:
      do:
        default: []
        type: steps
    steps:
      # - setup-sccache
      # - restore-sccache-cache
      
      - run: apt update && apt-get install -y protobuf-compiler

      - run:
          name: Set Cargo Parallel Jobs Setting
          command: echo 'export "CARGO_BUILD_JOBS"="8"' >> $BASH_ENV

      - steps: << parameters.do >>

      # - save-sccache-cache
jobs:
  lint-rust:
    docker:
      - image: rust:latest
    resource_class: xlarge
    steps:
      - checkout

      - with-rust-setup:
          do:
            - run:
                name: Print Rust Versions
                command: rustc --version; cargo --version; rustup --version

            - run:
                name: Install Rust Format
                command: rustup component add rustfmt

            - run:
                name: Test Formatting
                command: cargo fmt -- --check

            - run:
                name: Clippy
                command: rustup component add clippy && cargo clippy --workspace --no-deps
  test-rust:
    docker:
      - image: rust:latest
    resource_class: xlarge
    steps:
      - checkout

      - run:
          name: Print Rust Versions
          command: rustc --version; cargo --version; rustup --version

      - with-rust-setup:
          do:
            - run:
                name: Build
                command: cargo build --locked --all-targets

            - run:
                name: Run Tests
                command: cargo test --locked

            - run:
                name: Build Docs
                command: cargo doc --workspace --no-deps
  build-release:
    docker:
      - image: rust:latest
    resource_class: xlarge
    steps:
      - checkout

      - run:
          name: Print Rust Versions
          command: rustc --version; cargo --version; rustup --version

      - with-rust-setup:
          do:
            - run:
                name: Build
                command: cargo build --locked --bin web-axum --release

      - store_artifacts:
          path: target/release/web-axum
          destination: web-axum
      - persist_to_workspace:
          root: target
          paths:
            - release/web-axum

  deploy:
    docker:
      - image: rust:latest
    resource_class: small
    steps:
      - add_ssh_keys
      - attach_workspace:
          at: target
      # Copied from
      # Changes from source:
      #  - removed `sudo` usage in mv since its not needed/in the container
      - run:
          name: "Download tailscale if not installed"
          command: |
            if ! command -v tailscale --version >/dev/null 2>&1; then
              echo "Tailscale is not installed, installing..."
              wget https://pkgs.tailscale.com/stable/tailscale_1.24.2_amd64.tgz
              tar -xzf tailscale_1.24.2_amd64.tgz
              rm tailscale_1.24.2_amd64.tgz
              TSPATH=tailscale_1.24.2_amd64
              mv "${TSPATH}/tailscale" "${TSPATH}/tailscaled" /usr/bin
            else
              echo "Tailscale is already installed"
            fi
      - run:
          name: "Run tailscale"
          background: true
          command: |
            tailscaled --tun=userspace-networking --outbound-http-proxy-listen=localhost:1054 --socks5-server=localhost:1055
      - run:
          name: "Auth tailscale"
          command: |
            HOSTNAME="circleci-$(cat /etc/hostname)"
            until tailscale up --authkey $TAILSCALE_AUTH_KEY --hostname=${HOSTNAME} --accept-routes --accept-dns
            do
              sleep 1
            done
            echo "export ALL_PROXY=socks5h://localhost:1055/" >> $BASH_ENV
            echo "export HTTP_PROXY=http://localhost:1054/" >> $BASH_ENV
            echo "export HTTPS_PROXY=http://localhost:1054/" >> $BASH_ENV
            echo "export http_proxy=http://localhost:1054/" >> $BASH_ENV
            echo "export https_proxy=http://localhost:1054/" >> $BASH_ENV
      - run: apt update && apt-get install netcat -y
      - run: scp -o "ProxyCommand nc -x localhost:1055 %h %p" -o StrictHostKeyChecking=no target/release/web-axum www@terrarium.coreyja.gmail.com.beta.tailscale.net:~/server/web-axum.new
      - run: ssh -o "ProxyCommand nc -x localhost:1055 %h %p" www@terrarium.coreyja.gmail.com.beta.tailscale.net "mv server/web-axum.new server/web-axum"
      - run: ssh -o "ProxyCommand nc -x localhost:1055 %h %p" circle@terrarium.coreyja.gmail.com.beta.tailscale.net "sudo systemctl restart terrarium.coreyja.com.service"

  bench:
    docker:
      - image: rust:latest
    resource_class: xlarge
    steps:
      - checkout

      - run:
          name: Print Rust Versions
          command: rustc --version; cargo --version; rustup --version

      - with-rust-setup:
          do:
            - run: cd battlesnake-rs/
            - run: cargo bench
            - store_artifacts:
                path: target/criterion
                destination: criterion

  profile:
    docker:
      - image: rust:latest
    resource_class: xlarge
    steps:
      - checkout

      - run:
          name: Print Rust Versions
          command: rustc --version; cargo --version; rustup --version

      - with-rust-setup:
          do:
            - run: cd battlesnake-rs/
            # - run: cargo bench --bench devin -- --profile-time 60
            - run: cargo bench --bench hobbs -- --profile-time 60
            - run: cargo bench --bench improbable_irene -- --profile-time 60
            # - run: cargo bench --bench a-prime -- --profile-time 60
            # - run: cargo bench --bench flood-fill -- --profile-time 60
      - store_artifacts:
          path: target/criterion
          destination: criterion
workflows:
  version: 2
  ci:
    jobs:
      - test-rust
      - lint-rust
      - deploy:
          requires:
            - test-rust
            - lint-rust
            - build-release
          filters:
            branches:
              only:
                - 'main'
          context:
            - Tailscale
      - build-release:
          filters:
            branches:
              only:
                - 'main'
      - profile:
          filters:
            branches:
              only:
                - main
                - /.*profile.*/
      - bench:
          filters:
            branches:
              only:
                - main
                - /.*bench.*/
