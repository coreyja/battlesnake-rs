version: 2.1

commands: # a reusable command with parameters
  setup-sccache:
    steps:
      - run:
          name: Install sccache
          command: |
            curl https://github.com/mozilla/sccache/releases/download/v0.3.0/sccache-v0.3.0-x86_64-unknown-linux-musl.tar.gz > sccache-v0.3.tar.qz
            tar -xvf sccache-v0.3.tar.qz
            chmod +x sccache

            # This configures Rust to use sccache.
            echo 'export "RUSTC_WRAPPER"="sccache"' >> $BASH_ENV
            # This is the maximum space sccache cache will use on disk.
            echo 'export "SCCACHE_CACHE_SIZE"="500M"' >> $BASH_ENV
            sccache --version
  restore-sccache-cache:
    steps:
      - restore_cache:
          name: Restore sccache cache
          key: v1-sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}
  save-sccache-cache:
    steps:
      - save_cache:
          name: Save sccache cache
          # We use {{ epoch }} to always upload a fresh cache:
          # Of course, restore_cache will not find this exact key,
          # but it will fall back to the closest key (aka the most recent).
          # See https://discuss.circleci.com/t/add-mechanism-to-update-existing-cache-key/9014/13
          key: v1-sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ epoch }}
          paths:
            - "~/.cache/sccache"
  with-cargo-cache:
    parameters:
      do:
        default: []
        type: steps
    steps:
      - setup-sccache
      - restore-sccache-cache

      - steps: << parameters.do >>

      - save-sccache-cache
jobs:
  lint-rust:
    docker:
      - image: rust:latest
    resource_class: medium
    steps:
      - checkout

      - run:
          name: Print Rust Versions
          command: rustc --version; cargo --version; rustup --version

      - run:
          name: Install Rust Format
          command: rustup component add rustfmt

      - run:
          name: Test Formatting
          command: cargo fmt -- --check
  test-rust:
    docker:
      - image: rust:latest
    resource_class: medium
    steps:
      - checkout

      - run:
          name: Print Rust Versions
          command: rustc --version; cargo --version; rustup --version

      - with-cargo-cache:
          do:
            - run:
                name: Build
                command: cargo build --locked --all-targets --jobs 2

      - run:
          name: Run Tests
          command: cargo test --locked

      - run:
          name: Build Docs
          command: cargo doc --workspace

      - run:
          name: Clippy
          command: rustup component add clippy && cargo clippy --workspace
  build-release:
    docker:
      - image: rust:latest
    resource_class: medium
    steps:
      - checkout

      - run:
          name: Print Rust Versions
          command: rustc --version; cargo --version; rustup --version

      - with-cargo-cache:
          do:
            - run:
                name: Build
                command: cargo build --locked --all-targets  --release --jobs 2

      - store_artifacts:
          path: target/release/web-axum
          destination: web-axum
      - store_artifacts:
          path: target/release/web-rocket
          destination: web-rocket
      - persist_to_workspace:
          root: target
          paths:
            - release/web-axum
            - release/web-rocket

  deploy:
    docker:
      - image: rust:latest
    resource_class: small
    steps:
      - add_ssh_keys
      - attach_workspace:
          at: target
      # Copied from
      # Changes from source:
      #  - removed `sudo` usage in mv since its not needed/in the container
      - run:
          name: "Download tailscale if not installed"
          command: |
            if ! command -v tailscale --version >/dev/null 2>&1; then
              echo "Tailscale is not installed, installing..."
              VERSION=<< parameters.tailscale-version >>
              MINOR=$(echo << parameters.tailscale-version >> | awk -F '.' {'print $2'})
              if [ $((MINOR % 2)) -eq 0 ]; then
                URL="https://pkgs.tailscale.com/stable/tailscale_${VERSION}_amd64.tgz"
              else
                URL="https://pkgs.tailscale.com/unstable/tailscale_${VERSION}_amd64.tgz"
              fi
              curl $URL -o tailscale.tgz
              tar -C ${HOME} -xzf tailscale.tgz
              rm tailscale.tgz
              TSPATH=${HOME}/tailscale_${VERSION}_amd64
              mv "${TSPATH}/tailscale" "${TSPATH}/tailscaled" /usr/bin
            else
              echo "Tailscale is already installed"
            fi
      - run:
          name: "Run tailscale"
          background: true
          command: |
            tailscaled --tun=userspace-networking --outbound-http-proxy-listen=<< parameters.tailscale-proxy-address >>:1054 --socks5-server=<< parameters.tailscale-proxy-address >>:1055 --socket=/tmp/tailscaled.sock 2>~/tailscaled.log
      - run:
          name: "Auth tailscale"
          command: |
            HOSTNAME="circleci-$(cat /etc/hostname)"
            until tailscale --socket=/tmp/tailscaled.sock up --authkey ${<< parameters.tailscale-auth-key >>} --hostname=${HOSTNAME} --accept-routes
            do
              sleep 1
            done
            echo "export ALL_PROXY=socks5h://<< parameters.tailscale-proxy-address >>:1055/" >> $BASH_ENV
            echo "export HTTP_PROXY=http://<< parameters.tailscale-proxy-address >>:1054/" >> $BASH_ENV
            echo "export HTTPS_PROXY=http://<< parameters.tailscale-proxy-address >>:1054/" >> $BASH_ENV
            echo "export http_proxy=http://<< parameters.tailscale-proxy-address >>:1054/" >> $BASH_ENV
            echo "export https_proxy=http://<< parameters.tailscale-proxy-address >>:1054/" >> $BASH_ENV
      - run: scp target/web-axum coreyja@terrarium.coreyja.gmail.com.beta.tailscale.net:~/server/web-axum

  bench:
    docker:
      - image: rust:latest
    resource_class: medium
    steps:
      - checkout

      - run:
          name: Print Rust Versions
          command: rustc --version; cargo --version; rustup --version

      - with-cargo-cache:
          do:
            - run: cd battlesnake-rs/
            - restore_cache:
                keys:
                  - v2-criterion-baseline
            - run: cargo bench
            - store_artifacts:
                path: target/criterion
                destination: criterion

  profile:
    docker:
      - image: rust:latest
    resource_class: medium
    steps:
      - checkout

      - run:
          name: Print Rust Versions
          command: rustc --version; cargo --version; rustup --version

      - run: cd battlesnake-rs/
      # - run: cargo bench --bench devin -- --profile-time 60
      - run: cargo bench --bench hobbs -- --profile-time 60
      - run: cargo bench --bench mcts -- --profile-time 60
      # - run: cargo bench --bench a-prime -- --profile-time 60
      # - run: cargo bench --bench flood-fill -- --profile-time 60
      - store_artifacts:
          path: target/criterion
          destination: criterion
workflows:
  version: 2
  ci:
    jobs:
      - test-rust
      - lint-rust
      - deploy:
          requires:
            - test-rust
            - lint-rust
            - build-release
          filters:
            branches:
              only:
                - 'main'
      - build-release:
          filters:
            branches:
              only:
                - 'main'
      - profile:
          filters:
            branches:
              only:
                - main
                - /.*profile.*/
      - bench:
          filters:
            branches:
              only:
                - main
                - /.*bench.*/
